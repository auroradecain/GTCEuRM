GTCEuStartupEvents.registry('gtceu:recipe_type', event=>{

    // Mystical Agriculture
    event.create('synthetic_fluid')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(1, 0, 1, 4)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW_MULTIPLE, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.CHEMICAL)

    event.create('synthetic_solid')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(1, 4, 1, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW_MULTIPLE, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.CHEMICAL)

    event.create('synthetic_lifeform')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(1, 4, 1, 1)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARC_FURNACE, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.COMPUTATION)

    event.create('greenhouse')
        .category('multiblock')
        .setEUIO('in')
        .setMaxIOSize(1, 2, 1, 0)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setProgressBar(GuiTextures.PROGRESS_BAR_RECYCLER, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.BATH)
})

GTCEuStartupEvents.registry('gtceu:machine', event=>{

    // Mystical Agriculture
    event.create('synthetic_fluid_rig', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('synthetic_fluid')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_NON_PERFECT])
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAA", "#A#", "#A#", "###", "###")
            .aisle("AAA", "A A", "A A", "#A#", "#A#")
            .aisle("A@A", "#A#", "#A#", "###", "###")
            .where('@', Predicates.controller(Predicates.blocks(definition.get())))
            // .where('C', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))
            .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()).setMinGlobalLimited(3)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setMaxGlobalLimited(1)))
            .where(" ", Predicates.air())
            .where("#", Predicates.any())
            .build())
        .workableCasingRenderer("gtceu:block/casings/solid/machine_casing_solid_steel", "gtceu:block/multiblock/implosion_compressor", false)

    event.create('synthetic_solid_rig', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('synthetic_solid')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_NON_PERFECT])
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('BBB', '#B#', "#B#", "###", "###")
            .aisle("BBB", "B B", "B B", "#B#", "#B#")
            .aisle("B$B", "#B#", "#B#", "###", "###")
            .where('$', Predicates.controller(Predicates.blocks(definition.get())))
            // .where('D', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))
            .where('B', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()).setMinGlobalLimited(4)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setMaxGlobalLimited(1)))
            .where(" ", Predicates.air())
            .where("#", Predicates.any())
            .build())
        .workableCasingRenderer("gtceu:block/casings/solid/machine_casing_solid_steel", "gtceu:block/multiblock/large_chemical_reactor", false)


    event.create('synthetic_lifeform_simulator', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('synthetic_lifeform')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_NON_PERFECT])
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('CCC', 'CCC', 'CCC')
            .aisle('CCC', 'C C', 'CCC')
            .aisle('CCC', 'C%C', 'CCC')
            .where('%', Predicates.controller(Predicates.blocks(definition.get())))
            .where('C', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()).setMinGlobalLimited(8)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setMaxGlobalLimited(1)))
            .where(" ", Predicates.air())
            .build())
        .workableCasingRenderer("gtceu:block/casings/solid/machine_casing_solid_steel", "gtceu:block/multiblock/gcym/large_assembler", false)

    event.create('greenhouse', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('greenhouse')
        .appearanceBlock(GTBlocks.CASING_INVAR_HEATPROOF)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('DDDDD', 'DGGGD', 'DGGGD', 'DGGGD', 'DDDDD')
            .aisle('DDDDD', 'GFFFD', 'G   G', 'G E G', 'DDDDD')
            .aisle('DDDDD', 'GFWFD', 'G E G', 'GEEEG', 'DDDDD')
            .aisle('DDDDD', 'GFFFD', 'G   G', 'G E G', 'DDDDD')
            .aisle('DD&DD', 'DGGGD', 'DGGGD', 'DGGGD', 'DDDDD')
            .where('&', Predicates.controller(Predicates.blocks(definition.get())))
            .where('W', Predicates.blocks("minecraft:water"))
            .where('F', Predicates.blocks("farmersdelight:rich_soil"))
            .where('E', Predicates.blocks("gtceu:inferium_block"))
            .where('D', Predicates.blocks("gtceu:heatproof_machine_casing")
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setMaxGlobalLimited(1)))
            .where('G', Predicates.blocks("glass")
                .or(Predicates.blocks("gtceu:heatproof_machine_casing")))
            .where(' ', Predicates.air())
            .build())
        .workableCasingRenderer("gtceu:block/casings/solid/machine_casing_heatproof", "gtceu:block/multiblock/steam_oven", false)
})